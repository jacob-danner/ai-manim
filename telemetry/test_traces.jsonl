{"trace_id": "b0ae951d37ec9912619e9790fb44d4ec", "span_id": "a61bda22b7d4878b", "parent_span_id": "34509f5ba1cd354d", "name": "LM.__call__", "start_time": 1754010606582776000, "end_time": 1754010607442638000, "duration_ns": 859862000, "status_code": "OK", "attributes": {"input.mime_type": "application/json", "input.value": "{\"prompt\": null, \"messages\": [{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `input_text` (str): Test input\\nYour output fields are:\\n1. `reasoning` (str): \\n2. `output_text` (str): Test output\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\n[[ ## input_text ## ]]\\n{input_text}\\n\\n[[ ## reasoning ## ]]\\n{reasoning}\\n\\n[[ ## output_text ## ]]\\n{output_text}\\n\\n[[ ## completed ## ]]\\nIn adhering to this structure, your objective is: \\n        Test signature for telemetry\"}, {\"role\": \"user\", \"content\": \"[[ ## input_text ## ]]\\nHello, world!\\n\\nRespond with the corresponding output fields, starting with the field `[[ ## reasoning ## ]]`, then `[[ ## output_text ## ]]`, and then ending with the marker for `[[ ## completed ## ]]`.\"}], \"kwargs\": {}}", "llm.model_name": "google/gemini-2.5-flash", "llm.provider": "openrouter", "llm.invocation_parameters": "{\"temperature\": 0.0, \"max_tokens\": 100}", "llm.input_messages.0.message.role": "system", "llm.input_messages.0.message.content": "Your input fields are:\n1. `input_text` (str): Test input\nYour output fields are:\n1. `reasoning` (str): \n2. `output_text` (str): Test output\nAll interactions will be structured in the following way, with the appropriate values filled in.\n\n[[ ## input_text ## ]]\n{input_text}\n\n[[ ## reasoning ## ]]\n{reasoning}\n\n[[ ## output_text ## ]]\n{output_text}\n\n[[ ## completed ## ]]\nIn adhering to this structure, your objective is: \n        Test signature for telemetry", "llm.input_messages.1.message.role": "user", "llm.input_messages.1.message.content": "[[ ## input_text ## ]]\nHello, world!\n\nRespond with the corresponding output fields, starting with the field `[[ ## reasoning ## ]]`, then `[[ ## output_text ## ]]`, and then ending with the marker for `[[ ## completed ## ]]`.", "output.value": "[\"[[ ## reasoning ## ]]\\nThe user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\\n[[ ## output_text ## ]]\\nTest output for \\\"Hello, world!\\\"\\n[[ ## completed ## ]]\"]", "output.mime_type": "application/json", "llm.output_messages.0.message.role": "assistant", "llm.output_messages.0.message.content": "[[ ## reasoning ## ]]\nThe user provided \"Hello, world!\" as input. I need to provide a test output.\n[[ ## output_text ## ]]\nTest output for \"Hello, world!\"\n[[ ## completed ## ]]", "openinference.span.kind": "LLM"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "b0ae951d37ec9912619e9790fb44d4ec", "span_id": "34509f5ba1cd354d", "parent_span_id": "4256019b6f7323c6", "name": "ChatAdapter.__call__", "start_time": 1754010606582474000, "end_time": 1754010607443211000, "duration_ns": 860737000, "status_code": "OK", "attributes": {"input.mime_type": "application/json", "input.value": "{\"lm\": \"<dspy.clients.lm.LM object at 0x16abc4140>\", \"lm_kwargs\": {}, \"signature\": \"StringSignature(input_text -> reasoning, output_text\\n    instructions='Test signature for telemetry'\\n    input_text = Field(annotation=str required=True json_schema_extra={'desc': 'Test input', '__dspy_field_type': 'input', 'prefix': 'Input Text:'})\\n    reasoning = Field(annotation=str required=True json_schema_extra={'prefix': \\\"Reasoning: Let's think step by step in order to\\\", 'desc': '${reasoning}', '__dspy_field_type': 'output'})\\n    output_text = Field(annotation=str required=True json_schema_extra={'desc': 'Test output', '__dspy_field_type': 'output', 'prefix': 'Output Text:'})\\n)\", \"demos\": [], \"inputs\": {\"input_text\": \"Hello, world!\"}}", "output.value": "[{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}]", "output.mime_type": "application/json", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "b0ae951d37ec9912619e9790fb44d4ec", "span_id": "4256019b6f7323c6", "parent_span_id": "d7200b3a387a48a0", "name": "Predict(StringSignature).forward", "start_time": 1754010606582378000, "end_time": 1754010607443493000, "duration_ns": 861115000, "status_code": "OK", "attributes": {"input.value": "{\"input_text\": \"Hello, world!\"}", "input.mime_type": "application/json", "output.value": "{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}", "output.mime_type": "application/json", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "b0ae951d37ec9912619e9790fb44d4ec", "span_id": "d7200b3a387a48a0", "parent_span_id": "b19cf00382c13498", "name": "Predict.forward", "start_time": 1754010606582327000, "end_time": 1754010607443637000, "duration_ns": 861310000, "status_code": "OK", "attributes": {"input.value": "{\"input_text\": \"Hello, world!\"}", "input.mime_type": "application/json", "output.mime_type": "application/json", "output.value": "{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "b0ae951d37ec9912619e9790fb44d4ec", "span_id": "b19cf00382c13498", "parent_span_id": "e074bc6dc3b1e146", "name": "ChainOfThought.forward", "start_time": 1754010606582270000, "end_time": 1754010607443775000, "duration_ns": 861505000, "status_code": "OK", "attributes": {"input.value": "{\"input_text\": \"Hello, world!\"}", "input.mime_type": "application/json", "output.mime_type": "application/json", "output.value": "{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "b0ae951d37ec9912619e9790fb44d4ec", "span_id": "e074bc6dc3b1e146", "parent_span_id": null, "name": "TestModule.forward", "start_time": 1754010606582194000, "end_time": 1754010607443903000, "duration_ns": 861709000, "status_code": "OK", "attributes": {"input.value": "{\"input_text\": \"Hello, world!\"}", "input.mime_type": "application/json", "output.mime_type": "application/json", "output.value": "{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "ecd228ad0c739496b267edbfa564b0b4", "span_id": "ee94f52f4bf29340", "parent_span_id": "278de0b96108012b", "name": "LM.__call__", "start_time": 1754011141797650000, "end_time": 1754011141797940000, "duration_ns": 290000, "status_code": "OK", "attributes": {"input.mime_type": "application/json", "input.value": "{\"prompt\": null, \"messages\": [{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `input_text` (str): Test input\\nYour output fields are:\\n1. `reasoning` (str): \\n2. `output_text` (str): Test output\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\n[[ ## input_text ## ]]\\n{input_text}\\n\\n[[ ## reasoning ## ]]\\n{reasoning}\\n\\n[[ ## output_text ## ]]\\n{output_text}\\n\\n[[ ## completed ## ]]\\nIn adhering to this structure, your objective is: \\n        Test signature for telemetry\"}, {\"role\": \"user\", \"content\": \"[[ ## input_text ## ]]\\nHello, world!\\n\\nRespond with the corresponding output fields, starting with the field `[[ ## reasoning ## ]]`, then `[[ ## output_text ## ]]`, and then ending with the marker for `[[ ## completed ## ]]`.\"}], \"kwargs\": {}}", "llm.model_name": "google/gemini-2.5-flash", "llm.provider": "openrouter", "llm.invocation_parameters": "{\"temperature\": 0.0, \"max_tokens\": 100}", "llm.input_messages.0.message.role": "system", "llm.input_messages.0.message.content": "Your input fields are:\n1. `input_text` (str): Test input\nYour output fields are:\n1. `reasoning` (str): \n2. `output_text` (str): Test output\nAll interactions will be structured in the following way, with the appropriate values filled in.\n\n[[ ## input_text ## ]]\n{input_text}\n\n[[ ## reasoning ## ]]\n{reasoning}\n\n[[ ## output_text ## ]]\n{output_text}\n\n[[ ## completed ## ]]\nIn adhering to this structure, your objective is: \n        Test signature for telemetry", "llm.input_messages.1.message.role": "user", "llm.input_messages.1.message.content": "[[ ## input_text ## ]]\nHello, world!\n\nRespond with the corresponding output fields, starting with the field `[[ ## reasoning ## ]]`, then `[[ ## output_text ## ]]`, and then ending with the marker for `[[ ## completed ## ]]`.", "output.value": "[\"[[ ## reasoning ## ]]\\nThe user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\\n[[ ## output_text ## ]]\\nTest output for \\\"Hello, world!\\\"\\n[[ ## completed ## ]]\"]", "output.mime_type": "application/json", "llm.output_messages.0.message.role": "assistant", "llm.output_messages.0.message.content": "[[ ## reasoning ## ]]\nThe user provided \"Hello, world!\" as input. I need to provide a test output.\n[[ ## output_text ## ]]\nTest output for \"Hello, world!\"\n[[ ## completed ## ]]", "openinference.span.kind": "LLM"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "ecd228ad0c739496b267edbfa564b0b4", "span_id": "278de0b96108012b", "parent_span_id": "4e2959b28b290823", "name": "ChatAdapter.__call__", "start_time": 1754011141797358000, "end_time": 1754011141798150000, "duration_ns": 792000, "status_code": "OK", "attributes": {"input.mime_type": "application/json", "input.value": "{\"lm\": \"<dspy.clients.lm.LM object at 0x13c734230>\", \"lm_kwargs\": {}, \"signature\": \"StringSignature(input_text -> reasoning, output_text\\n    instructions='Test signature for telemetry'\\n    input_text = Field(annotation=str required=True json_schema_extra={'desc': 'Test input', '__dspy_field_type': 'input', 'prefix': 'Input Text:'})\\n    reasoning = Field(annotation=str required=True json_schema_extra={'prefix': \\\"Reasoning: Let's think step by step in order to\\\", 'desc': '${reasoning}', '__dspy_field_type': 'output'})\\n    output_text = Field(annotation=str required=True json_schema_extra={'desc': 'Test output', '__dspy_field_type': 'output', 'prefix': 'Output Text:'})\\n)\", \"demos\": [], \"inputs\": {\"input_text\": \"Hello, world!\"}}", "output.value": "[{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}]", "output.mime_type": "application/json", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "ecd228ad0c739496b267edbfa564b0b4", "span_id": "4e2959b28b290823", "parent_span_id": "05d17a342d2cd214", "name": "Predict(StringSignature).forward", "start_time": 1754011141797271000, "end_time": 1754011141798431000, "duration_ns": 1160000, "status_code": "OK", "attributes": {"input.value": "{\"input_text\": \"Hello, world!\"}", "input.mime_type": "application/json", "output.value": "{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}", "output.mime_type": "application/json", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "ecd228ad0c739496b267edbfa564b0b4", "span_id": "05d17a342d2cd214", "parent_span_id": "7506776ea9e00758", "name": "Predict.forward", "start_time": 1754011141797220000, "end_time": 1754011141798506000, "duration_ns": 1286000, "status_code": "OK", "attributes": {"input.value": "{\"input_text\": \"Hello, world!\"}", "input.mime_type": "application/json", "output.mime_type": "application/json", "output.value": "{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "ecd228ad0c739496b267edbfa564b0b4", "span_id": "7506776ea9e00758", "parent_span_id": "f41cd7f1366b384b", "name": "ChainOfThought.forward", "start_time": 1754011141797165000, "end_time": 1754011141798569000, "duration_ns": 1404000, "status_code": "OK", "attributes": {"input.value": "{\"input_text\": \"Hello, world!\"}", "input.mime_type": "application/json", "output.mime_type": "application/json", "output.value": "{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
{"trace_id": "ecd228ad0c739496b267edbfa564b0b4", "span_id": "f41cd7f1366b384b", "parent_span_id": null, "name": "TestModule.forward", "start_time": 1754011141797092000, "end_time": 1754011141798628000, "duration_ns": 1536000, "status_code": "OK", "attributes": {"input.value": "{\"input_text\": \"Hello, world!\"}", "input.mime_type": "application/json", "output.mime_type": "application/json", "output.value": "{\"reasoning\": \"The user provided \\\"Hello, world!\\\" as input. I need to provide a test output.\", \"output_text\": \"Test output for \\\"Hello, world!\\\"\"}", "openinference.span.kind": "CHAIN"}, "events": [], "resource_attributes": {"telemetry.sdk.language": "python", "telemetry.sdk.name": "opentelemetry", "telemetry.sdk.version": "1.36.0", "service.name": "ai-manim-pipeline", "service.version": "0.1.0"}}
